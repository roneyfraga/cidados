
# Ping 

`Rworkspace/2019_RES-ping`

- `ping.R`

arquivo para verificar se o site está no ar.

- `*/1 * * * * Rscript /home/bibr/ping.R`

crontab para executar esse script a cada minuto.

- `analysis.R`

arquivo para ler o csv e fazer um gráfico de quanto tempo o site fica fora do ar a cada dia.

## Ping

```{r filename='ping.R'}
#| eval: false
#| echo: true
#| code-fold: show

library(RCurl)

dataf <- data.frame(periodo = Sys.time(), online = url.exists("http://periodicoscientificos.ufmt.br"))

write.table(dataf, "RES_ping.csv", sep = ",", col.names = !file.exists("RES_ping.csv"), append = T, row.names = F)
```

## Análise

```{r filename='analysis.R'}
#| eval: false
#| echo: true
#| code-fold: show

library(rio)
library(pipeR)
library(dplyr)
library(ggplot2)
library(RCurl)

pings <- read.csv(text = getURL('www.roneyfraga.com/projects/RES_ping.csv')) %>>% as_tibble %>>% slice(1:80000)

# pings <- read.csv('RES_ping_2020 - 05 - 12.csv') %>>% as_tibble %>>% slice(1:80000)

pings$periodo <- as.Date(pings$periodo)

pings$status <- NA
pings[pings$online == TRUE,'status']  <- 'online'
pings[pings$online == FALSE,'status']  <- 'offline'
pings$online <- NULL

pings %>>% 
    group_by(periodo) %>>% 
    count(status) %>>% 
    (. -> pings2)

ggplot(pings2, aes(x = periodo, y = n)) + 
    geom_col(aes(fill = status), width = .8) +
    scale_y_continuous(limits = c(0,1440), breaks = seq(0,1440, by = 60)) +
    scale_x_date(date_breaks = "2 days") +
    xlab("Dia") + 
    ylab("Número de pings") +
    theme(
          axis.text.x = element_text(angle = 90, hjust = 1, size = 12),
          axis.text.y = element_text(angle = 0, vjust = 0.4, hjust = 1, size = 12),
          panel.grid.major.x = element_blank(),
          legend.position = "none",
          panel.background = element_rect(fill = "white", colour = "grey50")
   ) 

```



