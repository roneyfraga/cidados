{"title":"json + `purrr::map()`","markdown":{"headingText":"json + `purrr::map()`","containsRefs":false,"markdown":"\n\n`Rworkspace/2022-json-map`\n\n```{r filename='json-reader.R'}\n#| eval: false \n#| echo: true\n#| code-fold: show\n\n# não existe 'rooms' dentro de pcf\n\nlibrary(jsonlite) \nlibrary(purrr) \nlibrary(dplyr) \nlibrary(rio) \n\n# 13.09\njsonlite::fromJSON('pcf-form-default-rtdb-export 13.09.json') ->\n    pcf\n\n#---------------\n# desistentes\n\nlista2dfdesistentes <- function(x) {x |> purrr::pluck('desistentes') |> as.data.frame() |> tibble::as_tibble()}\n\npcf[['rooms']] |>\n    purrr::map(purrr::safely(lista2dfdesistentes)) |>\n    purrr::map(purrr::pluck('result')) |>\n    purrr::discard(is.null) ->\n    desistentes\n\ndesistentes |> \n    purrr::map(function(x) gsub('^.*questao', 'questao', names(x))) |>\n    purrr::map(function(x) gsub('_.*$', '', x)) |>\n    purrr::map(function(x) gsub('[[:upper:]].*\\\\.', '', x)) |>\n    purrr::map(function(x) gsub('[[:upper:]].*$', '', x)) |>\n    purrr::map(function(x) ifelse(nchar(x) == 0, 'a_deletar', x)) |>\n    purrr::map(function(x) gsub('ended', 'endedAt', x)) |>\n    purrr::map(function(x) gsub('\\\\.', '', x)) ->\n    desistentes_nomes\n\ndesistentes_nomes |> \n    unlist() |> \n    tibble::as_tibble() |> \n    dplyr::count(value, sort = F) |> \n    print(n = Inf)\n\ndesistentes2 <- desistentes\n\nfor (i in seq_along(desistentes2)) { \n    names(desistentes2[[i]]) <- desistentes_nomes[[i]]\n    desistentes2[[i]]$id <- names(desistentes2[i])\n}\n\ndesistentes2 |> \n    dplyr::bind_rows() |> \n    dplyr::relocate(id, endedAt, questao01:questao09b) |>\n    dplyr::relocate(questao07d, .after = questao07c) |>\n    dplyr::select(- a_deletar) ->\n    desistentes_df\n\nrio::export(desistentes_df, 'pcf_desistentes_13_09.xlsx') \n\n#---------------\n# aderidos\n\nlista2dfaderidos <- function(x) {x |> purrr::pluck('aderidos') |> as.data.frame() |> tibble::as_tibble()}\n\npcf[['rooms']] |>\n    purrr::map(purrr::safely(lista2dfaderidos)) |>\n    purrr::map(purrr::pluck('result')) |>\n    purrr::discard(is.null) ->\n    aderidos\n\naderidos |> \n    purrr::map(function(x) gsub('^.*questao', 'questao', names(x))) |>\n    purrr::map(function(x) gsub('_.*$', '', x)) |>\n    purrr::map(function(x) gsub('[[:upper:]].*\\\\.', '', x)) |>\n    purrr::map(function(x) gsub('[[:upper:]].*$', '', x)) |>\n    purrr::map(function(x) ifelse(nchar(x) == 0, 'a_deletar', x)) |>\n    purrr::map(function(x) gsub('ended', 'endedAt', x)) |>\n    purrr::map(function(x) gsub('\\\\.', '', x)) ->\n    aderidos_nomes\n\nunlist(aderidos_nomes) |> \n    tibble::as_tibble() |> \n    count(value, sort = T) |> \n    slice(1:129) |>\n    dplyr::filter(value != 'a_deletar') |> \n    dplyr::pull(value) ->\n    var_names\n\naderidos2 <- aderidos\n\nfor (i in seq_along(aderidos2)) { \n\n    names(aderidos2[[i]]) <- aderidos_nomes[[i]]\n\n    aderidos2[[i]]$id <- names(aderidos2[i])\n\n    aderidos2[[i]] <- aderidos2[[i]][, colnames(aderidos2[[i]]) %in% c('id', var_names)]\n}\n\naderidos2 |> \n    dplyr::bind_rows() |>\n    dplyr::mutate(situacao = 'aderidos') |> \n    dplyr::relocate(situacao, id, sort(var_names)) ->\n    aderidos_df\n\naderidos_df |> \n    dplyr::select(situacao, id, endedAt, dplyr::contains('questao43')) |>\n    tidyr::drop_na() |>\n    dplyr::distinct(.keep_all = TRUE) |>\n    dplyr::arrange(id, questao43a) ->\n    aderidos_questao43\n\naderidos_df |> \n    dplyr::select(situacao, id, endedAt, dplyr::contains('questao49')) |>\n    tidyr::drop_na() |>\n    dplyr::distinct(.keep_all = TRUE) |>\n    dplyr::arrange(id, questao49a) ->\n    aderidos_questao49\n\naderidos_df |> \n    dplyr::select(situacao, id, endedAt, dplyr::contains('questao53')) |>\n    tidyr::drop_na() |>\n    dplyr::distinct(.keep_all = TRUE) |>\n    dplyr::arrange(id, questao53a) ->\n    aderidos_questao53\n\naderidos_df |> \n    dplyr::select(situacao, id, endedAt, dplyr::contains('questao56')) |>\n    tidyr::drop_na() |>\n    dplyr::distinct(.keep_all = TRUE) |>\n    dplyr::arrange(id, questao56a) ->\n    aderidos_questao56\n\naderidos_df |> \n    dplyr::select(situacao, id, endedAt, dplyr::contains('questao57')) |>\n    tidyr::drop_na() |>\n    dplyr::distinct(.keep_all = TRUE) |>\n    dplyr::arrange(id, questao57a) ->\n    aderidos_questao57\n\n# eliminar questões com linhas duplicadas\nnames(aderidos_df) |>\n    {\\(x) x[!grepl('questao43*', x)] }() |>\n    {\\(x) x[!grepl('questao49*', x)] }() |>\n    {\\(x) x[!grepl('questao53*', x)] }() |>\n    {\\(x) x[!grepl('questao56*', x)] }() |>\n    {\\(x) x[!grepl('questao57*', x)] }() ->\n    questoes_para_manter\n\naderidos_df |>\n    dplyr::select(questoes_para_manter) |>\n    dplyr::distinct(situacao, id, endedAt, .keep_all = TRUE) ->\n    aderidos2_df\n\nl <- list(aderidos = aderidos2_df,\n          questao43 = aderidos_questao43, \n          questao49 = aderidos_questao49, \n          questao53 = aderidos_questao53, \n          questao56 = aderidos_questao56, \n          questao57 = aderidos_questao57) \n\nopenxlsx::write.xlsx(l, file = \"pcf_aderidos_13_09_questoes_separadas.xlsx\", asTable = T)\n\n# rio::export(aderidos_df, 'pcf_aderidos_13_09.xlsx') \n\n#---------------\n# nao aderidos\n\nlista2dfnaoaderidos <- function(x) {x |> purrr::pluck('nao_aderidos') |> as.data.frame() |> tibble::as_tibble()}\n\npcf[['rooms']] |>\n    purrr::map(purrr::safely(lista2dfnaoaderidos)) |>\n    purrr::map(purrr::pluck('result')) |>\n    purrr::discard(is.null) ->\n    naoaderidos\n\nnaoaderidos |> \n    purrr::map(function(x) gsub('^.*questao', 'questao', names(x))) |>\n    purrr::map(function(x) gsub('_.*$', '', x)) |>\n    purrr::map(function(x) gsub('[[:upper:]].*\\\\.', '', x)) |>\n    purrr::map(function(x) gsub('[[:upper:]].*$', '', x)) |>\n    purrr::map(function(x) ifelse(nchar(x) == 0, 'a_deletar', x)) |>\n    purrr::map(function(x) gsub('ended', 'endedAt', x)) |>\n    purrr::map(function(x) gsub('\\\\.', '', x)) ->\n    naoaderidos_nomes\n\nunlist(naoaderidos_nomes) |> \n    tibble::as_tibble() |> \n    count(value, sort = T) |> \n    slice(1:22) |>\n    dplyr::filter(value != 'a_deletar') |> \n    dplyr::pull(value) |>\n    sort() ->\n    var_names\n\nnaoaderidos2 <- naoaderidos\n\nfor (i in seq_along(naoaderidos2)) { \n\n    names(naoaderidos2[[i]]) <- naoaderidos_nomes[[i]]\n\n    naoaderidos2[[i]]$id <- names(naoaderidos2[i])\n\n    naoaderidos2[[i]] <- naoaderidos2[[i]][, colnames(naoaderidos2[[i]]) %in% c('id', var_names)]\n\n    naoaderidos2[[i]] <- naoaderidos2[[i]] |> mutate_if(is.logical, as.character)\n\n}\n\nnaoaderidos2 |> \n    dplyr::bind_rows() |>\n    dplyr::mutate(situacao = 'naoaderidos') |> \n    dplyr::relocate(situacao, id, sort(var_names)) ->\n    naoaderidos_df\n\nrio::export(naoaderidos_df, 'pcf_naoaderidos_13_09.xlsx') \n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"projeto-json-map.html"},"language":{},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.2.237","bibliography":["references.bib"],"csl":"abnt-ipea.csl","theme":{"light":"flatly","dark":"darkly"},"toc-location":"right","author-meta":"Roney Fraga Souza"},"extensions":{"book":{"multiFile":true}}}}}