{"title":"`pandas` + `nympy` + `dfply`","markdown":{"headingText":"`pandas` + `nympy` + `dfply`","containsRefs":false,"markdown":"\n\n`Rworkspace/python`\n\n## pandas \n\n`py-pandas.py`\n\n```{python}\n#| eval: false\n#| echo: true\n#| code-fold: true\n\n# https://youtu.be/vmEHCJofslg\n\nimport pandas as pd\n\ndf = pd.read_csv('data/pokemon_data.csv')\n# df = pd.read_excel('data/pokemon_data.xlsx')\n# df = pd.read_csv('data/pokemon_data.txt', delimiter='\\t')\n\n# head and tail\nprint(df.tail(5))\n\nprint(df.head(5))\n\ndf.head(5)\ndf.tail(5)\n\n# read headers\ndf.columns\n\n# coluna específica\ndf.Name\ndf['Name']\ndf[['Name']]\n\n# colunas específicas e linhas específicas\ndf['Name'][0:5]\ndf[['Name','Type 1','HP']][0:5]\n\n# linha específica\ndf.iloc[0:3]\n\n# ler de um local específico\n# seleciona linhas e colunas por índice\ndf.iloc[2,1]\ndf.iloc[0:6, 1:5]\n\n# loc torna um pandas.DataFrame igual a um R::dataframe\n# seleciona linhas e coluns por nome\ndf.loc[ df.HP > 50, ['Name', 'Type 1', 'HP', 'Speed']]\n\ndf.loc[0:5, ['Name', 'Type 1', 'HP', 'Speed']]\n\ndf.loc[df['Type 1']=='Fire'][0:5]\n\n# estatísticas básicas  \ndf.describe()\n\n# sorting\ndf.sort_values('Name', ascending=False)\ndf.sort_values(['Type 1', 'HP'], ascending=True)\ndf.sort_values(['Type 1', 'HP'], ascending=[1,0])\n\n# making changes to the data\ndf['Total'] = df['HP'] + df['Attack'] + df['Defense']\ndf.Total = df.HP + df.Attack + df.Defense\n\n# deletar uma coluna\ndf = df.drop(columns=['Total'])\n\n# somar as colunas 4 até a 9 para todas as linhas\ndf['Total'] = df.iloc[:,4:9].sum(axis=1) \n\n# mudar a ordem das colunas\ncols = df.columns.values\n[cols[0:4], cols[4:13]]\ndf = df[cols[0:4], cols[4:11]]\n\n# salvar um data frame\ndf.to_csv('modified.csv')\ndf.to_csv('modified.csv', index=False)\ndf.to_csv('modified.csv', index=False, sep='\\t')\n\ndf.to_excel('modified.xlsx', index=False)\n\n# filtering data\ndf.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison')]\ndf.loc[(df['Type 1'] == 'Grass') | (df['Type 2'] == 'Poison')]\ndf.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison') & (df['HP'] >70)]\n```\n\n## numpy\n\n`py-numpy.py`\n\n```{python}\n#| eval: false\n#| echo: true\n#| code-fold: true\n\nimport numpy as np\n\na = np.array([1,2,3], dtype='int32')\nprint(a)\n\nb = np.array([[9.0,8.0,7.0],[6.0,5.0,4.0]])\nprint(b)\n\n# Get Dimension\na.ndim\n\n# Get Shape\nb.shape\n\n# Get Type\na.dtype\n\n# Get Size\na.itemsize\n\n# Get total size\na.nbytes\n\n# Get number of elements\na.size\n\n# --------------------\n# Accessing/Changing specific elements, rows, columns, etc\n\na = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])\nprint(a)\n\n# Get a specific element [r, c]\na[1, 5]\n\n# Get a specific row \na[0, :]\na[0, ]\n\n# Get a specific column\na[:, 2]\n\n# Getting a little more fancy [startindex:endindex:stepsize]\na[0, 1:-1:2]\n\na[1,5] = 20\n\na[:,2] = [1,2]\nprint(a)\n\n# *3-d example\nb = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\nprint(b)\n\n# Get specific element (work outside in)\nb[0,1,1]\n\n# replace \nb[:,1,:] = [[9,9,9],[8,8]]\nb\n\n# Initializing Different Types of Arrays\n# All 0s matrix\nnp.zeros((2,3))\n\n# All 1s matrix\nnp.ones((4,2,2), dtype='int32')\n\n# Any other number\nnp.full((2,2), 99)\n\n# Any other number (full_like)\nnp.full_like(a, 4)\n\n# Random decimal numbers\nnp.random.rand(4,2)\n\n# Random Integer values\nnp.random.randint(-4,8, size=(3,3))\n\n# The identity matrix\nnp.identity(5)\n\n# Repeat an array\narr = np.array([[1,2,3]])\nr1 = np.repeat(arr,3, axis=0)\nprint(r1)\n\noutput = np.ones((5,5))\nprint(output)\n\nz = np.zeros((3,3))\nz[1,1] = 9\nprint(z)\n\noutput[1:-1,1:-1] = z\nprint(output)\n\n\n# Be careful when copying arrays!!!\na = np.array([1,2,3])\nb = a.copy()\nb[0] = 100\n\nprint(a)\n\n# --------------------\n# Mathematics\na = np.array([1,2,3,4])\nprint(a)\n\na + 2\na - 2\na * 2\na / 2\nb = np.array([1,0,1,0])\na + b\na ** 2\n\n# Take the sin\nnp.cos(a)\n\n# Linear Algebra\na = np.ones((2,3))\nprint(a)\n\nb = np.full((3,2), 2)\nprint(b)\n\nnp.matmul(a,b)\n\n# Find the determinant\nc = np.identity(3)\nnp.linalg.det(c)\n\n# --------------------\n# Statistics\n\nstats = np.array([[1,2,3],[4,5,6]])\nstats\n\nnp.min(stats)\n\nnp.max(stats, axis=1)\n\nnp.sum(stats, axis=0)\n\n# Reorganizing Arrays\nbefore = np.array([[1,2,3,4],[5,6,7,8]])\nprint(before)\n\nafter = before.reshape((2,3))\nprint(after)\n\n# Vertically stacking vectors\nv1 = np.array([1,2,3,4])\nv2 = np.array([5,6,7,8])\n\nnp.vstack([v1,v2,v1,v2])\n\n# Horizontal  stack\nh1 = np.ones((2,4))\nh2 = np.zeros((2,2))\n\nnp.hstack((h1,h2))\n\n# --------------------\n# Miscellaneous\n\n# Load Data from File\nfiledata = np.genfromtxt('data.txt', delimiter=',')\nfiledata = filedata.astype('int32')\nprint(filedata)\n```\n\n## dfply\n\n`py-dfply.py`\n\n```{python}\n#| eval: false\n#| echo: true\n#| code-fold: true\n\n# https://github.com/kieferk/dfply\n\nfrom dfply import *\n\ndiamonds >> head(3)\n\nlowprice = diamonds >> head(10) >> tail(3)\nlowprice\n\ndiamonds >> head(10) >> tail(3)\ndiamonds\n\n# The X DataFrame symbol\ndiamonds >> select(X.carat, X.cut) >> head(3)\n\n# selecting \ndiamonds >> select(1, X.price, ['x', 'y']) >> head(2)\ndiamonds >> drop(1, X.price, ['x', 'y']) >> head(2)\ndiamonds >> select(~X.carat, ~X.color, ~X.clarity) >> head(2)\ndiamonds >> select(starts_with('c')) >> head(2)\ndiamonds >> select(~starts_with('c')) >> head(2)\ndiamonds >> drop(columns_from(X.price)) >> head(2)\ndiamonds >> select(columns_to(1, inclusive=True), 'depth', columns_from(-2)) >> head(2)\n\n# Subsetting and filtering\ndiamonds >> row_slice([10,15])\ndiamonds >> group_by('cut') >> row_slice(5)\ndiamonds >> sample(frac=0.0001, replace=False)\ndiamonds >> sample(n=3, replace=True)\ndiamonds >> distinct(X.color)\ndiamonds >> mask(X.cut == 'Ideal') >> head(4)\ndiamonds >> mask(X.cut == 'Ideal', X.color == 'E', X.table < 55, X.price < 500)\ndiamonds >> filter_by(X.cut == 'Ideal', X.color == 'E', X.table < 55, X.price < 500)\n\n(diamonds\n        >> filter_by(X.cut == 'Ideal', X.color == 'E', X.table < 55, X.price < 500)\n        >> pull('carat'))\n\n# DataFrame transformation\n\ndiamonds >> mutate(x_plus_y=X.x + X.y) >> select(columns_from('x')) >> head(3)\ndiamonds >> mutate(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) >> select(columns_from('x')) >> head(3)\ndiamonds >> transmute(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) >> head(3)\n\n# Grouping\n(diamonds >> group_by(X.cut) >>\n        mutate(price_lead=lead(X.price), price_lag=lag(X.price)) >>\n        head(2) >> select(X.cut, X.price, X.price_lead, X.price_lag))\n\n# Reshaping\ndiamonds >> arrange(X.table, ascending=False) >> head(5)\n\n(diamonds >> group_by(X.cut) >> arrange(X.price) >>\n        head(3) >> ungroup() >> mask(X.carat < 0.23))\n\ndiamonds >> rename(CUT=X.cut, COLOR='color') >> head(2)\ndiamonds >> gather('variable', 'value', ['price', 'depth','x','y','z']) >> head(5)\ndiamonds >> gather('variable', 'value') >> head(5)\n\nelongated = diamonds >> gather('variable', 'value', add_id=True)\nelongated >> head(5)\n\nwidened = elongated >> spread(X.variable, X.value)\nwidened >> head(5)\n\nwidened.dtypes\n\n# Joining\na = pd.DataFrame({\n        'x1':['A','B','C'],\n        'x2':[1,2,3]\n    })\nb = pd.DataFrame({\n    'x1':['A','B','D'],\n    'x3':[True,False,True]\n})\n\na >> inner_join(b, by='x1')\na >> outer_join(b, by='x1')\na >> left_join(b, by='x1')\na >> right_join(b, by='x1')\na >> semi_join(b, by='x1')\na >> anti_join(b, by='x1')\n\n# Set operations\na = pd.DataFrame({\n        'x1':['A','B','C'],\n        'x2':[1,2,3]\n    })\nc = pd.DataFrame({\n      'x1':['B','C','D'],\n      'x2':[2,3,4]\n})\n\na >> union(c)\na >> intersect(c)\na >> set_diff(c)\n\na >> bind_rows(b, join='inner')\na >> bind_rows(b, join='outer')\n\na >> bind_cols(b)\n\n# Summarization\ndiamonds >> summarize(price_mean=X.price.mean(), price_std=X.price.std())\ndiamonds >> group_by('cut') >> summarize(price_mean=X.price.mean(), price_std=X.price.std())\ndiamonds >> summarize_each([np.mean, np.var], X.price, 'depth')\ndiamonds >> group_by(X.cut) >> summarize_each([np.mean, np.var], X.price, 4)\n\n# Embedded column functions\n(diamonds >> mutate(price_lead=lead(X.price, 2), price_lag=lag(X.price, 2)) >>\n            select(X.price, -2, -1) >>\n            head(6))\n\ndiamonds >> select(X.price) >> mutate(price_btwn=between(X.price, 330, 340)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_drank=dense_rank(X.price)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_mrank=min_rank(X.price)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_cumsum=cumsum(X.price)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_cummean=cummean(X.price)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_cummax=cummax(X.price)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_cummin=cummin(X.price)) >> head(6)\ndiamonds >> select(X.price) >> mutate(price_cumprod=cumprod(X.price)) >> head(6)\n\n# Summary functions\ndiamonds >> group_by(X.cut) >> summarize(price_mean=mean(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_first=first(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_last=last(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_penultimate=nth(X.price, -2))\ndiamonds >> group_by(X.cut) >> summarize(price_n=n(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_ndistinct=n_distinct(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_iqr=IQR(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_min=colmin(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_max=colmax(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_median=median(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_var=var(X.price))\ndiamonds >> group_by(X.cut) >> summarize(price_sd=sd(X.price))\n\n```\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"python-pandas-numpy.html"},"language":{},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.2.237","bibliography":["references.bib"],"csl":"abnt-ipea.csl","theme":{"light":"flatly","dark":"darkly"},"toc-location":"right","author-meta":"Roney Fraga Souza"},"extensions":{"book":{"multiFile":true}}}}}