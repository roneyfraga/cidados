{
  "hash": "a359fa56be318ffa42003f0ab1435470",
  "result": {
    "markdown": "\n# Ping \n\n`Rworkspace/2019_RES-ping`\n\n- `ping.R`\n\narquivo para verificar se o site está no ar.\n\n- `*/1 * * * * Rscript /home/bibr/ping.R`\n\ncrontab para executar esse script a cada minuto.\n\n- `analysis.R`\n\narquivo para ler o csv e fazer um gráfico de quanto tempo o site fica fora do ar a cada dia.\n\n## Ping\n\n\n::: {.cell filename='ping.R'}\n\n```{.r .cell-code  code-fold=\"show\"}\nlibrary(RCurl)\n\ndataf <- data.frame(periodo = Sys.time(), online = url.exists(\"http://periodicoscientificos.ufmt.br\"))\n\nwrite.table(dataf, \"RES_ping.csv\", sep = \",\", col.names = !file.exists(\"RES_ping.csv\"), append = T, row.names = F)\n```\n:::\n\n\n## Análise\n\n\n::: {.cell filename='analysis.R'}\n\n```{.r .cell-code  code-fold=\"show\"}\nlibrary(rio)\nlibrary(pipeR)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(RCurl)\n\npings <- read.csv(text = getURL('www.roneyfraga.com/projects/RES_ping.csv')) %>>% as_tibble %>>% slice(1:80000)\n\n# pings <- read.csv('RES_ping_2020 - 05 - 12.csv') %>>% as_tibble %>>% slice(1:80000)\n\npings$periodo <- as.Date(pings$periodo)\n\npings$status <- NA\npings[pings$online == TRUE,'status']  <- 'online'\npings[pings$online == FALSE,'status']  <- 'offline'\npings$online <- NULL\n\npings %>>% \n    group_by(periodo) %>>% \n    count(status) %>>% \n    (. -> pings2)\n\nggplot(pings2, aes(x = periodo, y = n)) + \n    geom_col(aes(fill = status), width = .8) +\n    scale_y_continuous(limits = c(0,1440), breaks = seq(0,1440, by = 60)) +\n    scale_x_date(date_breaks = \"2 days\") +\n    xlab(\"Dia\") + \n    ylab(\"Número de pings\") +\n    theme(\n          axis.text.x = element_text(angle = 90, hjust = 1, size = 12),\n          axis.text.y = element_text(angle = 0, vjust = 0.4, hjust = 1, size = 12),\n          panel.grid.major.x = element_blank(),\n          legend.position = \"none\",\n          panel.background = element_rect(fill = \"white\", colour = \"grey50\")\n   ) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}