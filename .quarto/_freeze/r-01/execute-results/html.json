{
  "hash": "0cc6f7668f5d401ec83ba26d3031983f",
  "result": {
    "markdown": "\n# R class 01\n\n- introduction to R\n- vetor\n- matriz\n- data frame\n\n\n::: {.cell filename='r-01.R'}\n\n```{.r .cell-code  code-fold=\"show\"}\n# ------------------------------------------------------------\n# \n# File Name: CiDados_aula01.R\n# \n# Purpose: Ciência de Dados para Economistas - Faculdade de Economia UFMT\n#\n# inspired and adapted from 'Introduction to Social Network Analysis with R'\n# by Michal Bojanowski \n# and the text book 'R para cientistas sociais'\n# by Jakson Alves de Aquino\n# \n# Creation Date: 2016-04-23\n# Last Modified: Mon 05 Oct 2020 01:30:43 \n# Created By: Roney Fraga Souza\n# E-mail: roneyfraga@gmail.com\n# roneyfraga.com\n# \n# Licence:\n#\n# Creative Commons Attribution-NonCommercial-ShareAlike \n# CC BY-NC-SA\n# http://creativecommons.org/licenses/by-nc-sa/3.0/\n#\n# ------------------------------------------------------------\n\n# Introduction to R\n# vetor\n# matriz\n# data frame\n\n\n# objetivo da aula é compreender as seguintes operações\ndata(mtcars)\nmtcars\nsummary(mtcars$mpg)\nsummary(mtcars[mtcars$carb == 4, 'mpg'])\nwrite.table(mtcars, file = 'mtcars.csv', sep = ';', col.names = TRUE, row.names = TRUE)\nmtcars <- read.table(file = 'mtcars.csv', sep = ';', header = TRUE)\n\n\n# ------------------------------\n# use R as calculator\n1 + 1\n4 * 8\n25 * (4 - 2)\n5^3\n15 / (10 / 2)\nlog(1)\nsin(pi / 2)^2\n\n# + soma \n# - subtração\n# / divisão \n# * multiplicação\n# ^ exponenciação \n\n# > maior que\n# < menor que\n# >= maior ou igual a\n# <= menor ou igual a\n# & e\n# | ou\n# == igual a\n# ! não\n# != diferente \n\n5 != 5\n5 == 5\n5 >= 4\n(2 & 3) < 5\n(2 | 3) <= 3\n2 & 3 < 1\n(3 + 1) * (6 - 1) ^ 2\n3 + 1 * 6 - 1 ^ 2\n\n\n# ------------------------------\n# objects \n\na = 1\nb = 2\na * b\n\na <- 1\nb <- 2\na * b\n\na = c(2,3)\na <- c(2,3)\na\n\na >= 2\nc(2,3) > 2\na + 1\nc(2,4:8)\n\nletters\nLETTERS\nms <- 'Ana'\nms\n\nmandioca_square1 = c('Yasmin', 'Ana')\nmandioca_square3 = c(\"Yasmin\", \"Ana\")\n\nmandioca_square1 == mandioca_square3\n\ntolower(toupper(mandioca_square1))\n\na <- toupper(mandioca_square1)\nb <- tolower(a)\n\n# veremos no futuro: pipe\nmandioca_square1 |>\n    toupper() |>\n    tolower() |>\n    nchar()\n\nmandioca_square1 <- toupper(mandioca_square1)\nmandioca_square1\n\nmandioca_square1 == mandioca_square3\n\nmandioca_square1 <- tolower(mandioca_square1)\n\nmandioca_square2  <- c('Yasmin', 'Ana')\n\nx = c(1, 2, 3, 4, 5, 6, 7, 8, 9)\nx <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)\ny <- 1:9\n\ny ^ 2\nx / 2\n\na <- 3\nb <- 5\na * b\n\na = 3\nb = 5\na * b\n\n\n# ------------------------------\n# save objects \n\ndata(mtcars)\nmtcars\n\n# na forma nativa do R\n# 'save()', 'load()'  e save.image()\n\n# salvar apenas 'x' no arquivo 'x.rda' no diretório rawfiles\nsave(mtcars, file = \"rawfiles/mtcars.rda\")\n\n# salvando ambos, 'x' e 'y' no arquivo 'xy.rda'\nsave(x, y, file = \"rawfiles/xy.rda\") \n\n# salvar apenas 'x' no arquivo 'x.rds'\nsaveRDS(x, 'rawfiles/qualquer_nome.rds')\n\n# é possível salvar x e y em arquivos '.rds'?\nsaveRDS(x, y, 'rawfiles/x.rds')\n\n# listar os objetos que estão no workspace (espaço de trabalho)\nls()\n\n# remover todos os objetos visíveis do workspace\nrm(a)\nrm(x, y)\nrm(list = ls())\n\n# verificar se resta algum objeto no workspace\nls()\n\n# carregar o objeto 'x' no formato '.rda'\nload(\"xy.rda\")  \nls()\nx\ny\n\n# remover apenas o objeto 'x'\nrm(x)         \n\n# carregar os objetos 'x' e 'y' salvos em 'ly.rda'\nload(\"rawfiles/xy.rda\")  \nls()\n\n# carregar o objeto 'x' no formato '.rds'\nreadRDS(\"rawfiles/qualquer_nome.rds\")  \nx <- readRDS(\"rawfiles/qualquer_nome.rds\")  \nls()\n\n# salvar tudo que esta no workspace\nsave.image('rawfiles/Alunos_Mestrado.rda')\n\n\n\n# ------------------------------\n# encontrar e mudar o diretório de trabalho\n# \n# obtendo o atual diretório de trabalho do R\n# getwd()\n# dir()\n# setwd()\n\ngetwd()\n\nsetwd('/home/roney/')\ndir()\n\nsetwd('~/OneDrive/Rworkspace/2020 CiDados Mestrado')\ngetwd()\n\nCiDados <- \"/home/roney/OneDrive/Rworkspace/2020 CiDados Mestrado\"\n\n# listar os arquidos do diretório de trabalho\ndir()\n\n# mudando o diretório de trabalho do R\n# setwd(\"/home/roney/Sync/\")\n# setwd(\"~/Sync/\")\n\n# padrão Windows\n# setwd(\"C:\\Documentos\\Minha\\Pasta\")\n\ngetwd()\n\nread.csv(file = '/home/roney/OneDrive/Rworkspace/2020 CiDados Graduacao/rawfiles/mtcars.csv', sep = ';')\n\ncarros <- read.csv(file = '~/OneDrive/Rworkspace/2020 CiDados Mestrado/rawfiles/mtcars.csv', sep = ';')\n\nls()\n\nx\ny\nCiDados\ncarros\n\ngetwd()\nsetwd('/home/roney/OneDrive/Rworkspace/2020 CiDados Mestrado')\ndir()\n\n\n# ------------------------------\n# help - como obter ajuda?\n# \nhelp(\"mean\")\n?mean          \n\nx <- c(1:9)\nmean(x)\nmean(1:9)\n\ny <- c(1:9,NA)\nmean(y)\nmean(y, na.rm=TRUE)\n\nx\nquantile(x, probs = c(.1, 0.25, .5, .75), na.rm = FALSE)\nquantile(y, probs = c(.1, 0.25, .5, .75), na.rm = TRUE)\n\n\n# buscar por 'mean' nas páginas help\nhelp.search(\"mean\")\n# o mesmo que help.search(\"mean\")\n??mean               \n\n# obter os argumentos da função 'mean'\nargs(mean)\n\n# o manual completo do R e dos pacotes adicionais instalados pode se acessado\n# com a função help.start()\nhelp.start()\n\n# quando não lembramos do nome exato de uma função\napropos('mean')\napropos('read')\n\n# obter ajuda na internet a partir do próprio R\nRSiteSearch(\"social network analysis\")\n\n# obter um exemplo de alguma função\nexample('mean')\n\n# se você for falar com alguém sobre seu código que esta dando erro\n# leve essa informação que irá ajudar na busca pela solução\nsessionInfo()\n\n\n# ------------------------------\n# Pacotes\n\n# instalar o pacote\n# é necessário instalar o pacote apenas uma fez em seu computador\ninstall.packages('getLattes')\n\n# carregar o pacote\n# toda vez que o R for inicializado é necessário carregar os pacotes\nlibrary(getLattes)\n\n# obter as principais informações sobre um pacote\n# \"getLattes\"\nlibrary(help = \"getLattes\")\n# ou \nhelp(package = \"getLattes\")\n\ngetAtuacoesProfissionais('.xml')\n\n# ------------------------------\n# Tipos de dados\n\n# tudo no R é vetor\n\n# numeric\nnumerico <- 1:9\n(numerico <- 1:9)\nis.numeric(numerico)\nis.numeric('olá')\nis.character('olá')\nis.numeric('1')\nas.numeric('1')\nas.numeric('a')\n\n# date\nSys.Date()\n(today <- Sys.Date())\nis.character(today)\n\nis.character(as.character(today))\n\ntoday |>\n    as.character() |>\n    is.character()\n\ntoday |>\n    as.character() |>\n    class()\n\nformat(today, \"%d %b %y\")  \nformat(today, \"%d %b %Y\")  \ntoday\nclass(today)\n\n# factor\nletters\nLETTERS\nfator <- factor(letters[3:1])\nfator2 <- factor(c(letters[3:1], letters[2:3]))\nfator2 <- factor(c('c', 'b', 'a', 'b', 'c'))\na = c('b', 'a', 'b', 'c')\nfactor(a)\n\nfator3 <- factor(1:4)\nis.factor(fator2)\nis.factor(fator3)\n\n# text\ntexto <- 'algum texto será inserido'\ntexto <- \"algum texto será inserido\"\nis.character(texto)\nclass(texto)\n\n# logical\nboba <- c(TRUE, FALSE, TRUE, TRUE)\nboba <- c(T, F, T, T)\nis.logical(boba)\n\nis.logical(c('TRUE', 'FALSE', 'TRUE', 'TRUE'))\nis.logical(c(TRUE, FALSE, TRUE, TRUE))\n\nas.logical(c('TRUE', 'FALSE', 'TRUE', 'TRUE'))\n\nis.numeric(c('1', '2', '3', '4'))\nclass(c('1', '2', '3', '4'))\nis.character(c('1', '2', '3', '4'))\nas.numeric(c('1', '2', '3', '4'))\n\n# transformando os tipos de variáveis dados\nas.numeric(fator3)\nis.numeric(as.numeric(fator3))\n\nis.numeric(c(1, 2, 3, 4, 5))\nclass(c(1, 2, 3, 4, 5))\nas.character(c(1, 2, 3, 4, 5))\n\nc('1', '2', '3', '4', '5')\nclass(c('1', '2', '3', '4', '5'))\nas.numeric(c('1', '2', '3', '4', '5'))\n\n\n\n# ------------------------------\n# vetores\n\nvector(mode = \"character\", length = 5)\nvector(mode = \"numeric\", length = 7)\nvector(mode = \"logical\", length = 4)\n\n# função básica para criar vetores com valores pré-determinados é c(), abreviatura de concatenate\nc(\"Marx\", \"Weber\", \"Durkheim\")\nc(5, 3, 11, 6, 1, 4)\nc(TRUE, FALSE, TRUE, TRUE, FALSE)\n  \na <- c(5, 3, 11, 6, 1, 4)\na\na = c(5, 3, 11, 6, 1, 4)\na\nb <- 1:8  \nb\n\n# criar vetor como uma sequência\n# seq() from to by\nseq(10, 100, 5)\nseq(from = 10, to = 100, by = 5)\nseq(from = 1, to = 2, by = 0.02)\n\n# criar vetor via repetição\n# rep() elemento repetição\nrep('roney', 30)\na = rep('roney', 30)\nprint(a)\nwrite.table(a, 'arquivo_teste.txt')\nrep(2, 4)\n\n# levels\ncodigo <- c(23, 22, 23, 23, 22, 22, 23, 22)\nuf <- factor(codigo, levels = c(22, 23), labels = c(\"Piaui\", \"Ceara\"))\nuf\ntable(uf)\n\n# nomeando itens\nidh05 <- c(0.677, 0.742, 0.723, 0.683, 0.718, 0.718, 0.703, 0.738, 0.742)\nnames(idh05)\nnames(idh05) <- c(\"AL\", \"BA\", \"CE\", \"MA\", \"PB\", \"PE\", \"PI\", \"RN\", \"SE\")\nidh05\nnames(idh05)\n\nnames(idh05) <- NULL\nidh05\n\nnames(idh05) <- c(\"AL\", \"BA\", \"CE\", \"MA\", \"PB\", \"PE\", \"PI\", \"RN\", \"SE\")\nidh05\n\n# obtendo informações de um vetor\nlength(idh05)\nstr(idh05)\n\n# estatísticas descritivas\nsummary(idh05)\nmean(idh05)\nmedian(idh05)\nmin(idh05)\nmax(idh05)\nquantile(idh05)\n\n# convertendo vetores\na <- c(TRUE, FALSE, TRUE, FALSE)\na <- as.character(c(TRUE, FALSE, TRUE, FALSE))\nas.character(c(1, 3.4, -5.6, 9))\nas.numeric(c(TRUE, FALSE, TRUE, FALSE))\nas.numeric(c(\"1.3\", \"1.4\", \"1.7\"))\n\nas.numeric(c(\"a\", \"b\", \"c\"))\n\nis.character(a)\nis.logical(a)\n\n# Índices: obtendo e modificando valores\nx <- c(4, 8, 2, 6, 7, 1, 8, 1, 2)\ny <- c(6, 7, 3, 4, 1, 5, 2, 8, 9)\nz <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")\n\nx\ny\nz\n\nx[3]\ny[2]\nx[c(1, 3, 5)] \nx[c(5, 1, 3)]\na = c(5, 1, 3)\na\nx[a]\n\nz[1:4]\nz[1]\nz[7]\nz[c(2, 4, 6, 8)]\n\nx[2] * 2\nx * 2\n\ny < 5\n\ni <- y < 5\ni = y < 5\ni\ny\ny[i]\ny[!i]\n\ny\ny > 5\n\ny[y > 5]\n\ny[y < 5]\n\ny == 5\ny[y == 5]\n\na <- letters\na[1:5]\na[a != 'a']\na[!(a == 'a')]\n\nz[i]\nx[i]\n\nx[x == 2]\nz\n\nnames(x) <- z\nx\nx[\"c\"]\nx['c']\nx[c(\"b\", \"d\", \"g\")]\nx[-1]\nx[-c(1, 2, 3)]\n\nx\nx[3]\nx[3] <- 11\n\nx['c'] <- 11\nx[c(\"b\", \"d\", \"g\")] <- 0\nx\n\nx[x == 0]\nx[x != 0]\n\n# Operações\nx <- c(5, 2, 4, 3, 2) \ny <- c(1, 3, 2, 5, 2) \nx + y\nx - y\nx > y\nx[x > y]\nx[x < y]\nx == y\nx[x == y]\nx != y\nx[x != y]\ny + 1\n\nlength(y)\nlength(x)\n\nlength(x[x == y])\n\nx[x == y] |>\n    length()\n\n# erro ao trabalhar com vetores com dimensões distintas \nx <- c(1, 5, 7)\ny <- c(1, 2, 3, 4, 5, 6, 7) \nx + y\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}