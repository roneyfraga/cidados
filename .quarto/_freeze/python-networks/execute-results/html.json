{
  "hash": "789ceba41893bd568f59757ad555508f",
  "result": {
    "markdown": "# Redes complexas\n\n`Rworkspace/python`\n\n## graph_tool\n\n`py-graph_tool.py`\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\n# ------------------------------\n# Creating and manipulating graphs\n\nimport pandas as pd\nimport matplotlib as plt\nfrom graph_tool.all import *\n\ng = Graph()\n\nug = Graph(directed=False)\n\nug = Graph()\nug.set_directed(False)\nassert ug.is_directed() == False\n\ng1 = Graph()\ng2 = Graph(g1)     \n\nv1 = g.add_vertex()\nv2 = g.add_vertex()\ne = g.add_edge(v1, v2)\n\ngraph_draw(g, vertex_text=g.vertex_index, vertex_font_size=18, output_size=(200, 200))\n\nprint(v1.out_degree())\nprint(v1.in_degree())\n\nprint(e.source(), e.target())\n\nvlist = g.add_vertex(10)\n\nprint(len(list(vlist)))\n\nv = g.add_vertex()\nprint(g.vertex_index[v])\nprint(int(v))\n\ng.remove_edge(e)\ng.remove_vertex(v2) \n\nv = g.vertex(8)\ng.add_edge(g.vertex(2), g.vertex(3))\ne = g.edge(2, 3)\ne = g.add_edge(g.vertex(0), g.vertex(1))\n\nprint(g.edge_index[e])\n\n# ------------------------------\n# Iterating over vertices and edges¶\nfor v in g.vertices():\n    print(v)\n\nfor e in g.edges():\n    print(e)\n\nfor v in g.vertices():\n    for e in v.out_edges():\n        print(e)\n\nfor w in v.out_neighbors():\n    print(w)\n\n# the edge and neighbors order always match\nfor e, w in zip(v.out_edges(), v.out_neighbors()):\n    assert e.target() == w\n```\n:::\n\n\n## networkx\n\n`py-networkx.py`\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\n# ------------------------------\n# networkx\n\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# exercise make a star\nG = nx.Graph()\n\nG.add_edges_from([(1, 2), (1, 3), (1,4), (1,5)])\n\n# para gerar um frame limpo\nplt.figure()\n\nnx.draw(G, with_labels=True, font_weight='bold')\n\ndel(G)\n\n# fazer via range\nG1 = nx.Graph()\n\nfor i in range(1,6):\n    G1.add_edge(0,i)\n\nplt.figure()\nnx.draw(G1, with_labels=True, font_weight='bold')\n\n# whell\n# para fazer uma rede direcional\ng = nx.DiGraph()\n\nfor i in range(0,5):\n    g.add_edge(5,i)\n    g.add_edge(i, (i+1)%5)\n\nplt.figure()\nnx.draw(g, with_labels=True, font_weight='bold')\n\n# modo alternativo, e fácil\ng.add_cycle([0,1,2,3,4])\n\nlist(range(4, -1, -1))\n\n\n# terceiro exemplo\ng = nx.DiGraph()\ng.add_cycle([0,1,2,3,4])\ng.add_cycle([4,5,6,7,8])\n# segundo caminho\n# g.add_cycle([4,0,1,2,3,4,5,6,7,8,4])\nplt.figure()\nnx.draw(g, with_labels=True, font_weight='bold')\n\n# quarto exemplo\ng = nx.DiGraph()\ng.add_cycle(range(5))\ng.add_cycle(range(5,10))\n\nfor i in range(5):\n    g.add_edge(i,i+5)\n\nplt.figure()\nnx.draw(g, with_labels=True, font_weight='bold')\n```\n:::\n\n\n## Cumminities\n\n`py-cumminities.py`\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nfrom graph_tool import Graph\nfrom graph_tool.draw import graph_draw\nimport pandas as pd\nimport numpy as np\n\n# prepering test cases\n\n# pentagon box\n\ng_p = Graph(directed=False)\n\nfor i in range(5):\n    g_p.add_edge(i, (i+1)%5)\n    g_p.add_edge(i+5,(i+1)%5 + 5)\n    g_p.add_edge(i,i+5)\n\nfrom math import sin, cos, pi\n\npos_p = g_p.new_vertex_property('vector<double>')\n\nfor i in range(5):\n    pos_p[i] = (sin(2*pi*(i/5)), cos(2*pi*(i/5)))\n    pos_p[i+5] = (2*sin(2*pi*(i/5)), 2*cos(2*pi*(i/5)))\n\ngraph_draw(g_p, pos=pos_p)\n\n# Nested squares\ng_n = Graph(directed=False)\n\ng_n.add_vertex(12)\n\nside = 0\nother = 1\n\nfor side in 0,2:\n    for other in 1,3:\n        for pair in (0,0), (0,1), (1,0), (1,2), (2,1), (2,2):\n            index1, index2 = pair\n            g_n.add_edge(side*3+index1, other*3+index2 )\n\ngraph_draw(g_n, vertex_tex=g_n.vertex_index, output=\"test.png\")\n\n# Facebook network\n\ndf = pd.read_csv('data/facebook/414.edges', sep=' ', names=['pr1', 'pr2'])\n\ndf = df.loc[df['pr1'] > df['pr2']]\n\ndf.head(5)\n\nexisting = df.unstack().unique()\n\nnew_labels = pd.Series(range(len(existing)), index=existing)\n\nnew_labels.head(5)\n\ndf['pr1'] = df['pr1'].map(new_labels)\ndf['pr2'] = df['pr2'].map(new_labels)\n\ng_f = Graph(directed=False)\ng_f.add_edge_list(df.values)\n\ngraph_draw(g_f, output=\"test.png\")\n\ndef vector_difference(v1,v2):\n    \"\"\"\n    return  the p\n    \"\"\"\n\na = np.array([1,0,0,1])\nb = np.array([1,1,0,0])\n\nvector_difference(a,b)\n```\n:::\n\n\n",
    "supporting": [
      "python-networks_files"
    ],
    "filters": [],
    "includes": {}
  }
}