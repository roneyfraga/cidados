{
  "hash": "ddd3ae43c9ecdc02f99f5ca87e5d114c",
  "result": {
    "markdown": "\n# Vetor, matriz, data frame e lista\n\n- vector \n- matrix\n- data frame\n- list\n- table, aggregate, reshape, merge\n\n\n::: {.cell filename='r-02.R'}\n\n```{.r .cell-code  code-fold=\"show\"}\n# ------------------------------------------------------------\n# \n# File Name: CiDados_aula02.R\n#\n# Purpose: Ciência de Dados para Economistas - Faculdade de Economia UFMT\n#\n# inspired and adapted from \n# 'Introduction to Social Network Analysis with R'\n# by Michal Bojanowski\n# 'R para cientistas sociais' \n# by Jakson Alves de Aquino\n# 'Programming in R' \n# by Thomas Girke\n# \n# Creation Date: 2016-04-30\n# Last Modified: 2022-09-01_12:25 \n# Created By: Roney Fraga Souza\n# E-mail: roneyfraga@gmail.com\n# roneyfraga.com\n# \n# Licence:\n#\n# Creative Commons Attribution-NonCommercial-ShareAlike \n# CC BY-NC-SA\n# http://creativecommons.org/licenses/by-nc-sa/3.0/\n#\n# ------------------------------------------------------------\n\n\n# vetor (revisão)\n# matriz\n# data frame\n# lista\n# table, aggregate, reshape, merge\n\n\n# ------------------------------\n# vetores\n\nvector(mode = \"character\", length = 5)\nvector(mode = \"numeric\", length = 7)\nvector(mode = \"logical\", length = 4)\n\n# função básica para criar vetores com valores pré - determinados é c(), abreviatura de concatenate\nc(\"Marx\", \"Weber\", \"Durkheim\")\nc(5, 3, 11, 6, 1, 4)\nc(TRUE, FALSE, TRUE, TRUE, FALSE)\n \na <- c(5, 3, 11, 6, 1, 4)\na\na = c(5, 3, 11, 6, 1, 4)\na\nb <- 1:8 \nb\n\n# criar vetor como uma sequência\n# seq() from to by\nseq(10, 100, 5)\nseq(from = 10, to = 100, by = 5)\nseq(from = 1, to = 2, by = 0.02)\n\n# criar vetor via repetição\n# rep() elemento repetição\nrep('roney', 30)\nrep(2, 4)\n\n# levels\ncodigo <- c(23, 22, 23, 23, 22, 22, 23, 22)\nuf <- factor(codigo, levels = c(22, 23), labels = c(\"Piaui\", \"Ceara\"))\nuf\n\n# nomeando itens\nidh05 <- c(0.677, 0.742, 0.723, 0.683, 0.718, 0.718, 0.703, 0.738, 0.742)\nnames(idh05)\nnames(idh05) <- c(\"AL\", \"BA\", \"CE\", \"MA\", \"PB\", \"PE\", \"PI\", \"RN\", \"SE\")\nidh05\nnames(idh05)\n\n# obtendo informações de um vetor\nlength(idh05)\nstr(idh05)\n\n# estatísticas descritivas\nsummary(idh05)\nmean(idh05)\nmedian(idh05)\nmin(idh05)\nmax(idh05)\nquantile(idh05)\n\nclass(idh05)\nis.numeric(idh05)\n\n# convertendo vetores\na <- c(TRUE, FALSE, TRUE, FALSE)\na <- as.character(c(TRUE, FALSE, TRUE, FALSE))\nas.character(c(1, 3.4, - 5.6, 9))\nas.numeric(c(TRUE, FALSE, TRUE, FALSE))\nas.numeric(c(\"1.3\", \"1.4\", \"1.7\"))\n\nis.character(a)\nis.logical(a)\n\n# Índices: obtendo e modificando valores\nx <- c(4, 8, 2, 6, 7, 1, 8, 1, 2)\ny <- c(6, 7, 3, 4, 1, 5, 2, 8, 9)\nz <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")\nx[3]\ny[2]\nx[c(1, 3, 5)]\nz[1:4]\nz[1]\n\ny < 5\n\ni <- y < 5\ni = y < 5\ni\ny[i]\ny[!i]\nz[i]\nx[i]\n\nnames(x) <- z\nx\nx[\"b\"]\nx['b']\nx[c(\"b\", \"d\", \"g\")]\nx[- 1]\nx[- c(1, 2, 3)]\nx[3] <- 11\nx['c'] <- NA\nx\nx['c'] <- 11\nx[c(\"b\", \"d\", \"g\")] <- 0\nx\nis.na(x)\nx[is.na(x)]\nx[!(is.na(x))]\n\n\n# Operações\nx <- c(5, 2, 4, 3, 2) \ny <- c(1, 3, 2, 5, 2) \nx + y\nx - y\nx > y\nx[x > y]\nx[x < y]\nx == y\nx[x == y]\nx != y\nx[x != y]\ny + 1\n\n# erro ao trabalhar com vetores com dimensões distintas \nx <- c(1, 5, 7)\ny <- c(1, 2, 3, 4, 5, 6, 7) \nx + y\n\n\n#------------------------------ \n# Matrizes\n\n# juntar colunas\nx <- c(7, 9, 8, 10, 1)\ny <- c(9, 8, 10, 9, 3)\nz <- c(10, 9, 9, 9, 2)\ncbind(x, y, z)\n\n# juntar linhas\nrbind(x, y, z)\n\n# nomes das colunas e nomes das linhas\nm <- cbind(x, y, z)\nm\ncolnames(m) <- c(\"Matematica\", \"Portugues\", \"Historia\")\nrownames(m) <- c(\"Helena\", \"Jose\", \"Maria\", \"Francisco\", \"Macunaima\")\n\nm\nclass(m)\n\n# índices em uma matriz\n\n# M[linhas, colunas]\n\nm[5, 3]\nm[1:3, 2]\nm[1:3, c(1, 3)]\nm[c(1, 4), 1]\nm[\"Maria\", c(\"Portugues\", \"Matematica\")]\nm[, \"Historia\"]\nm[, ]\nm[\"Macunaima\", \"Portugues\"] <- 4\nm[\"Macunaima\", \"Portugues\"] = 4\nm[5, 2] <- 4\n\nm\nm[, 1]\nm[, 1] == 10\n\nm[m[, 1] == 10, ]\n\nnerd = m[, 1] == 10\nm[nerd, ]\n\nclass(m)\n\nrownames(m) <- c(\"Helena da Silva\", \"Jose Miranda\", \"Maria do Rosario\", \"Francisco Augusto\", \"Macunaima Matinho\")\nm\n\nrownames(m) <- toupper(rownames(m))\nm\n\n# objeto[linhas, colunas]\n# nomes das linhas e colunas\n# \n\n#------------------------------ \n# data frame\n\n# carregar uma base de dados padrão do R\ndata(mtcars)\nmtcars\nls()\n\n# help para descrobrir quais são as variáveis\n?mtcars\nhelp('mtcars')\n# [, 1] mpg Miles / (US) gallon      \n# [, 2] cyl Number of cylinders      \n# [, 3] disp Displacement (cu.in.)     \n# [, 4] hp Gross horsepower       \n# [, 5] drat Rear axle ratio       \n# [, 6] wt Weight (1000 lbs)      \n# [, 7] qsec 1 / 4 mile time       \n# [, 8] vs Engine (0 = V - shaped, 1 = straight)  \n# [, 9] am Transmission (0 = automatic, 1 = manual) \n# [, 10] gear Number of forward gears     \n# [, 11] carb Number of carburetors     \n\n# 3 formas de escrever a mesma função\nhead(mtcars)\nhead(mtcars, n = 6)\nhead(mtcars, 6)\n\ntail(mtcars, 6)\nstr(mtcars)\n\n# other usefull functions on data frames:\nnrow(mtcars)  # number of rows\nncol(mtcars)  # number of columns\nnames(mtcars) # names of the variables\nhead(mtcars)  # first 6 observations\nhead(mtcars, 2) # first 2 observations\ntail(mtcars)  # last 6 observations\ndim(mtcars)\n\n### Referring to individual variables with '$'\nmtcars$mpg\nmtcars$mpg * 2\n\nmtcars$mpg\nmtcars[, 'mpg']\nmtcars[, 1]\n\n# mtcars[linhas, colunas ]\nmtcars\nmtcars[, ]\nmtcars[1, 1]\nmtcars[1, 1:3]\nmtcars[1, c(1, 2, 3)]\nmtcars[1, c(3, 2, 3)]\nmtcars[1, c(1:3, 5)]\nmtcars[, 'mpg']\nmtcars[1:3, 'mpg']\nmtcars[1:3, 1]\n\nmtcars[14:18, ]\n\nmtcars[14:18, 2:5]\nmtcars[14:18, c('cyl', 'disp', 'hp', \n    'drat')]\n\nmtcars['Fiat 128', c('cyl', 'disp', 'hp', 'drat')]\nmtcars['Fiat 128', 2:5]\n\nmtcars[c(1, 5, 8), ]\nmtcars[c(1, 5, 8), 2:5]\nmtcars[c(8, 1, 5), c(5, 2)]\nmtcars[c('Fiat 128', 'Toyota Corolla'), 2:5]\n\n\n# selecionar variáveis (colunas) e observações (linhas)\n# dataframe[linhas, colunas]\n# dataframe[nome ou número, nome ou número]\n\n?sort\nhelp('sort')\n\nmtcars$mpg\nsort(mtcars$mpg)\nsort(mtcars$mpg, decreasing = FALSE)\n\nsort(mtcars$mpg, decreasing = TRUE)\n\nmtcars\nmtcars$mpg\nmtcars[, 'mpg']\nmtcars[, 1]\n\nmtcars[1:3, 1:7]\n\nmtcars[1:3, 1:7]\nmtcars[c(1, 3), c(1, 7)]\n\n# ordenando toda a tabela\nsort(mtcars$mpg)\norder(mtcars$mpg)\n\nmtcars[c(15, 16, 24, 7), ]\n\n6 == 6\nmtcars$cyl == 6\nmtcars[mtcars$cyl == 6, ] \n\norder(mtcars$mpg)\nmtcars[order(mtcars$mpg), ]\nmtcars[order(mtcars$mpg, decreasing = TRUE), ]\n\n\n# Mean \nmean(mtcars$mpg)\nmean(mtcars[, 'mpg'])\nmean(mtcars[, 1])\n\nmean(mtcars$mpg[1:10])\n\ntable(mtcars$cyl)\ntable(mtcars[, 'cyl'])\ntable(mtcars[, 2])\n\ntable(mtcars[, 2], mtcars[, 'gear'])\n\ntable(mtcars$cyl, mtcars$gear)\naddmargins(table(mtcars$cyl, mtcars$gear))\n\nrownames(mtcars)\n\n# milhas por galão\n# Uma milha é igual a 1, 61 km\n# Um galão é igual a 3, 79 litros\n# 1, 61 ÷ 3, 79 = 0, 425. Isto significa que 0, 425 km / l é igual a 1 mpg\n# para obter kml a partir de mpg basta multiplicar mpg * 0, 425\n\nmtcars$mpg * 0.425\n\nmtcars$kml <- mtcars$mpg * 0.425\nmtcars$kml = mtcars$mpg * 0.425\n\nmtcars$dai <- NA\nmtcars$dai <- 'dai mestrado'\nmtcars$dai <- NULL\nmtcars <- mtcars[, names(mtcars) != 'dai']\nhead(mtcars)\n\nnames(mtcars)[names(mtcars) != 'dai']\n\nmtcars[order(mtcars$kml), ]\n\nmtcars <- mtcars[order(mtcars$kml, decreasing = TRUE), ]\n\nwrite.csv(mtcars, 'mtcars.csv', sep = ', ')\nwrite.csv2(mtcars, 'mtcars.csv', sep = ';')\nwrite.table(mtcars, 'mtcars.txt')\n#------------------------------ \n\nlibrary(dplyr)\n\nmtcars |> \n tibble::as_tibble() |> \n dplyr::select(mpg, cyl, disp, gear) |> \n dplyr::filter(cyl == 4) |> \n dplyr::arrange(mpg) |> \n dplyr::rename(gear2 = gear) |> \n dplyr::mutate(kml = mpg * 0.425) |> \n dplyr::group_by(gear2) |> \n dplyr::summarise(kml = mean(kml)) \n\n\n#------------------------------ \n# lista\n\nnumeros = 1:3\nletras = c(\"a\", \"b\", \"c\", \"d\")\nlogico = c(TRUE, FALSE)\n\nlist(numeros, letras, logico)\n\nl <- list(numeros, letras, logico)\n\nlista = list(mtcars = mtcars, iris = iris, lmin = letters, lmai = LETTERS)\nnames(lista)\nlength(lista)\nlista[[2]][1:3, ]\nlista[['iris']][1:3, ]\n\nlist(lista, l)\n\nlista <- list(numeros = 1:3, \n              letras = c(\"a\", \"b\", \"c\", \"d\"), \n              logico = c(TRUE, FALSE))\nlista\n\nnames(lista)\nlength(lista)\n\nlista[1]\nlista[[1]]\nlista[[1]][[2]]\n\nlista[2]\nlista[[2]]\nlista[\"letras\"]\nlista[[\"letras\"]]\nlista$letras\n\nlista$letras[1]\nlista$letras[3:4]\n\n\nlista[3]\nlista[1:2]\nlista[c(1, 3)]\n\nlista\n\nlista[[2]]\nclass(lista[[2]]) \ntoupper(lista[[2]])\n\nlista[2]\nclass(lista[2]) \ntoupper(lista[2])\n\nnames(lista)\nlista$letras\nclass(lista$letras) \ntoupper(lista$letras)\n\nlista[[\"letras\"]]\nclass(lista[[\"letras\"]]) \ntoupper(lista[[\"letras\"]])\n\nlista[\"letras\"]\nclass(lista[\"letras\"]) \ntoupper(lista[\"letras\"])\n\n# acessar a lista\n# - posição do elemento [1]\n# - nome do elemento ['nome']\n# - [] retorna uma sub - lista\n# - [[]] retorna o próprio elemento\n# - $nome_do_elemento \nlista\nlista[2]\nlista[[2]]\n\nnames(lista)\nlista['letras']\nlista[['letras']]\n\nlista$letras\n\n#nomes com espaço para nomear variáveis\nlst <- list(c(\"aa\", \"bb\", \"cc\"), c(1, 2, 3, 4), c(1.1, 1.2, 1.3))\nnames(lst) <- c(\"Texto\", \"Inteiros\", \"Numeros reais\")\nlst\nlst$Texto\nlst[['Texto']]\n\nlst$Inteiros\nlst[['Inteiros']]\n\nlst$`Numeros reais`\nlst[['Numeros reais']]\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}