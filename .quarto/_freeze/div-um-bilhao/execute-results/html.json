{
  "hash": "c467732f53c5fca779a75849e6afc48e",
  "result": {
    "markdown": "\n# Um bilhão\n\nTeste de velocidade para calcular de 1 até 1 bilhão.\n\n\n::: {.cell}\n\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tictoc)\n\nsum_until_r <- function(numero = 10) {\n    n <- 0\n    while (n < numero) \n        n <- n + 1 \n    n\n}\n\ntictoc::tic()\nsum_until_r(1000000000)\ntictoc::toc()\n```\n:::\n\n\n> 21.264 sec elapsed\n\n## Python from Reticulate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate) \n\ntictoc::tic()\npy_run_string(\"\nn = 0\nwhile(n < 1000000000):\n    n+=1\n\nprint(n)\n\")\ntictoc::toc()\n```\n:::\n\n\n> 48.923 sec elapsed\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# open python console in vim or rstudio \n# reticulate::repl_python()\n\nimport time\n\ndef sum_until_py(numero = 10):\n    n = 0\n    while(n < numero):\n        n+=1\n    return n\n\ntic = time.perf_counter()\nsum_until_py(1000000000)\ntoc = time.perf_counter()\n\nprint(toc - tic, 'secs')\n```\n:::\n\n\n> 25.6930 secs\n\n## Python source \n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::source_python('code/um_bilhao.py')\n\ntictoc::tic()\nsum_until_py(1000000000)\ntictoc::toc()\n```\n:::\n\n\n> 37.102 sec elapsed\n\n\n## Julia from JuliaCall \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(JuliaCall) \njulia <- julia_setup()\n\njulia_command(\"\nfunction sum_until_jl(numero) \ni = 0\nwhile i <= numero\n    i += 1\nend\nend\", show_value = F)\n\ntictoc::tic()\njulia_command(\"sum_until_jl(1000000000)\")\ntictoc::toc()\n```\n:::\n\n\n> 0.001 sec elapsed\n\n## Julia  \n\n\n::: {.cell}\n\n```{.julia .cell-code}\n# open julia console in vim or rstudio \n# julia_console()\n\n@time begin\nnjl = 0;\nwhile njl <= 1000000000\n    global njl += 1\nend\nend\n```\n:::\n\n\n> 272.569 seconds (1000.00 M allocations: 14.901 GiB, 0.15% gc time)\n\n## Julia source\n\n\n::: {.cell}\n\n```{.r .cell-code}\njulia_source('code/um_bilhao.jl')\n\ntictoc::tic()\njulia_call('sum_until_jl', 1000000000)\ntictoc::toc()\n```\n:::\n\n\n> 1.158 sec elapsed\n\n\n## C++ via Rcpp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Rcpp)\n\ncppFunction(\"\nint sum_until_cpp(int numero) { \n    int n = 0; \n    while (n < numero)\n        n++;\n    return n;\n}\n\")\n\ntictoc::tic()\nsum_until_cpp(1000000000)\ntictoc::toc()\n```\n:::\n\n\n> 0.001 sec elapsed\n\n## C++ via Rcpp source\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsourceCpp('code/um_bilhao.cpp')\n\ntictoc::tic()\nsum_until_v2_cpp(1000000000)\ntictoc::toc()\n```\n:::\n\n\n> 0.001 sec elapsed\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}