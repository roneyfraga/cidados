{
  "hash": "b3f814e33804ad06bedbfb3b0afde922",
  "result": {
    "markdown": "\n# Tabela binária\n\n- gera tabela binária para `n` dimensões\n\n`Rworkspace/2020_Henrique-Roge`\n\n\n::: {.cell filename='henrique.R'}\n\n```{.r .cell-code  code-fold=\"show\"}\n# escolher o número de variáveis\n# nvar = número de variáveis\nnvar  <- 14\n\n# nao precisa alterar a partir daqui\nlst <- lapply(numeric(nvar), function(x) c(0, 1))\nm <- as.matrix(expand.grid(lst))\nm\n\n# ordenar as linhas\nordenar <- data.frame(somalinha = rowsums(m), id = 1:nrow(m))\nordenar <- ordenar[order(ordenar$somalinha), ]\nm <- m[ordenar$id, ]\nm\n\n# função para encontrar as combinações de determinada sequência\n# comb(5,2)     # ex.: em 5 números 2 combinações\ncomb = function(n, x) {\n  factorial(n) / factorial(n - x) / factorial(x)\n}\n\ncb <- null\n\nfor(i in seq_along(m[1,])) {\n  cb[[i]] <- comb(ncol(m), i)\n}\n\ncb <- unlist(cb)\ncb <- c(cb[length(cb)], cb)\ncb\n\nres <- null\n\nfor(i in seq_along(cb)) {\n\n  if(i == 1) {\n\n    res[[1]] <- m[1, ]\n\n  }else{\n\n    final <- sum(cb[1:i])\n    inicio <- (sum(cb[1:i]) + 1) - cb[i]\n\n    res[[i]] <- m[inicio:final, ]\n\n  }\n}\n\n\nfor(i in seq(res)) {\n  write.csv(data.frame(res[[i]]), file = paste0('binaryprobmatrix_', 'nvar_', nvar, '_comb_', i, '.csv'), row.names = f)\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}