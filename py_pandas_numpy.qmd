
# `pandas` + `nympy` + `dfply`

`Rworkspace/python`

## pandas 

`py-pandas.py`

```{python}
#| eval: false
#| echo: true
#| code-fold: true

# https://youtu.be/vmEHCJofslg

import pandas as pd

df = pd.read_csv('data/pokemon_data.csv')
# df = pd.read_excel('data/pokemon_data.xlsx')
# df = pd.read_csv('data/pokemon_data.txt', delimiter='\t')

# head and tail
print(df.tail(5))

print(df.head(5))

df.head(5)
df.tail(5)

# read headers
df.columns

# coluna específica
df.Name
df['Name']
df[['Name']]

# colunas específicas e linhas específicas
df['Name'][0:5]
df[['Name','Type 1','HP']][0:5]

# linha específica
df.iloc[0:3]

# ler de um local específico
# seleciona linhas e colunas por índice
df.iloc[2,1]
df.iloc[0:6, 1:5]

# loc torna um pandas.DataFrame igual a um R::dataframe
# seleciona linhas e coluns por nome
df.loc[ df.HP > 50, ['Name', 'Type 1', 'HP', 'Speed']]

df.loc[0:5, ['Name', 'Type 1', 'HP', 'Speed']]

df.loc[df['Type 1']=='Fire'][0:5]

# estatísticas básicas  
df.describe()

# sorting
df.sort_values('Name', ascending=False)
df.sort_values(['Type 1', 'HP'], ascending=True)
df.sort_values(['Type 1', 'HP'], ascending=[1,0])

# making changes to the data
df['Total'] = df['HP'] + df['Attack'] + df['Defense']
df.Total = df.HP + df.Attack + df.Defense

# deletar uma coluna
df = df.drop(columns=['Total'])

# somar as colunas 4 até a 9 para todas as linhas
df['Total'] = df.iloc[:,4:9].sum(axis=1) 

# mudar a ordem das colunas
cols = df.columns.values
[cols[0:4], cols[4:13]]
df = df[cols[0:4], cols[4:11]]

# salvar um data frame
df.to_csv('modified.csv')
df.to_csv('modified.csv', index=False)
df.to_csv('modified.csv', index=False, sep='\t')

df.to_excel('modified.xlsx', index=False)

# filtering data
df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison')]
df.loc[(df['Type 1'] == 'Grass') | (df['Type 2'] == 'Poison')]
df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison') & (df['HP'] >70)]
```

## numpy

`py-numpy.py`

```{python}
#| eval: false
#| echo: true
#| code-fold: true

import numpy as np

a = np.array([1,2,3], dtype='int32')
print(a)

b = np.array([[9.0,8.0,7.0],[6.0,5.0,4.0]])
print(b)

# Get Dimension
a.ndim

# Get Shape
b.shape

# Get Type
a.dtype

# Get Size
a.itemsize

# Get total size
a.nbytes

# Get number of elements
a.size

# --------------------
# Accessing/Changing specific elements, rows, columns, etc

a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
print(a)

# Get a specific element [r, c]
a[1, 5]

# Get a specific row 
a[0, :]
a[0, ]

# Get a specific column
a[:, 2]

# Getting a little more fancy [startindex:endindex:stepsize]
a[0, 1:-1:2]

a[1,5] = 20

a[:,2] = [1,2]
print(a)

# *3-d example
b = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
print(b)

# Get specific element (work outside in)
b[0,1,1]

# replace 
b[:,1,:] = [[9,9,9],[8,8]]
b

# Initializing Different Types of Arrays
# All 0s matrix
np.zeros((2,3))

# All 1s matrix
np.ones((4,2,2), dtype='int32')

# Any other number
np.full((2,2), 99)

# Any other number (full_like)
np.full_like(a, 4)

# Random decimal numbers
np.random.rand(4,2)

# Random Integer values
np.random.randint(-4,8, size=(3,3))

# The identity matrix
np.identity(5)

# Repeat an array
arr = np.array([[1,2,3]])
r1 = np.repeat(arr,3, axis=0)
print(r1)

output = np.ones((5,5))
print(output)

z = np.zeros((3,3))
z[1,1] = 9
print(z)

output[1:-1,1:-1] = z
print(output)


# Be careful when copying arrays!!!
a = np.array([1,2,3])
b = a.copy()
b[0] = 100

print(a)

# --------------------
# Mathematics
a = np.array([1,2,3,4])
print(a)

a + 2
a - 2
a * 2
a / 2
b = np.array([1,0,1,0])
a + b
a ** 2

# Take the sin
np.cos(a)

# Linear Algebra
a = np.ones((2,3))
print(a)

b = np.full((3,2), 2)
print(b)

np.matmul(a,b)

# Find the determinant
c = np.identity(3)
np.linalg.det(c)

# --------------------
# Statistics

stats = np.array([[1,2,3],[4,5,6]])
stats

np.min(stats)

np.max(stats, axis=1)

np.sum(stats, axis=0)

# Reorganizing Arrays
before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)

after = before.reshape((2,3))
print(after)

# Vertically stacking vectors
v1 = np.array([1,2,3,4])
v2 = np.array([5,6,7,8])

np.vstack([v1,v2,v1,v2])

# Horizontal  stack
h1 = np.ones((2,4))
h2 = np.zeros((2,2))

np.hstack((h1,h2))

# --------------------
# Miscellaneous

# Load Data from File
filedata = np.genfromtxt('data.txt', delimiter=',')
filedata = filedata.astype('int32')
print(filedata)
```

## dfply

`py-dfply.py`

```{python}
#| eval: false
#| echo: true
#| code-fold: true

# https://github.com/kieferk/dfply

from dfply import *

diamonds >> head(3)

lowprice = diamonds >> head(10) >> tail(3)
lowprice

diamonds >> head(10) >> tail(3)
diamonds

# The X DataFrame symbol
diamonds >> select(X.carat, X.cut) >> head(3)

# selecting 
diamonds >> select(1, X.price, ['x', 'y']) >> head(2)
diamonds >> drop(1, X.price, ['x', 'y']) >> head(2)
diamonds >> select(~X.carat, ~X.color, ~X.clarity) >> head(2)
diamonds >> select(starts_with('c')) >> head(2)
diamonds >> select(~starts_with('c')) >> head(2)
diamonds >> drop(columns_from(X.price)) >> head(2)
diamonds >> select(columns_to(1, inclusive=True), 'depth', columns_from(-2)) >> head(2)

# Subsetting and filtering
diamonds >> row_slice([10,15])
diamonds >> group_by('cut') >> row_slice(5)
diamonds >> sample(frac=0.0001, replace=False)
diamonds >> sample(n=3, replace=True)
diamonds >> distinct(X.color)
diamonds >> mask(X.cut == 'Ideal') >> head(4)
diamonds >> mask(X.cut == 'Ideal', X.color == 'E', X.table < 55, X.price < 500)
diamonds >> filter_by(X.cut == 'Ideal', X.color == 'E', X.table < 55, X.price < 500)

(diamonds
        >> filter_by(X.cut == 'Ideal', X.color == 'E', X.table < 55, X.price < 500)
        >> pull('carat'))

# DataFrame transformation

diamonds >> mutate(x_plus_y=X.x + X.y) >> select(columns_from('x')) >> head(3)
diamonds >> mutate(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) >> select(columns_from('x')) >> head(3)
diamonds >> transmute(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) >> head(3)

# Grouping
(diamonds >> group_by(X.cut) >>
        mutate(price_lead=lead(X.price), price_lag=lag(X.price)) >>
        head(2) >> select(X.cut, X.price, X.price_lead, X.price_lag))

# Reshaping
diamonds >> arrange(X.table, ascending=False) >> head(5)

(diamonds >> group_by(X.cut) >> arrange(X.price) >>
        head(3) >> ungroup() >> mask(X.carat < 0.23))

diamonds >> rename(CUT=X.cut, COLOR='color') >> head(2)
diamonds >> gather('variable', 'value', ['price', 'depth','x','y','z']) >> head(5)
diamonds >> gather('variable', 'value') >> head(5)

elongated = diamonds >> gather('variable', 'value', add_id=True)
elongated >> head(5)

widened = elongated >> spread(X.variable, X.value)
widened >> head(5)

widened.dtypes

# Joining
a = pd.DataFrame({
        'x1':['A','B','C'],
        'x2':[1,2,3]
    })
b = pd.DataFrame({
    'x1':['A','B','D'],
    'x3':[True,False,True]
})

a >> inner_join(b, by='x1')
a >> outer_join(b, by='x1')
a >> left_join(b, by='x1')
a >> right_join(b, by='x1')
a >> semi_join(b, by='x1')
a >> anti_join(b, by='x1')

# Set operations
a = pd.DataFrame({
        'x1':['A','B','C'],
        'x2':[1,2,3]
    })
c = pd.DataFrame({
      'x1':['B','C','D'],
      'x2':[2,3,4]
})

a >> union(c)
a >> intersect(c)
a >> set_diff(c)

a >> bind_rows(b, join='inner')
a >> bind_rows(b, join='outer')

a >> bind_cols(b)

# Summarization
diamonds >> summarize(price_mean=X.price.mean(), price_std=X.price.std())
diamonds >> group_by('cut') >> summarize(price_mean=X.price.mean(), price_std=X.price.std())
diamonds >> summarize_each([np.mean, np.var], X.price, 'depth')
diamonds >> group_by(X.cut) >> summarize_each([np.mean, np.var], X.price, 4)

# Embedded column functions
(diamonds >> mutate(price_lead=lead(X.price, 2), price_lag=lag(X.price, 2)) >>
            select(X.price, -2, -1) >>
            head(6))

diamonds >> select(X.price) >> mutate(price_btwn=between(X.price, 330, 340)) >> head(6)
diamonds >> select(X.price) >> mutate(price_drank=dense_rank(X.price)) >> head(6)
diamonds >> select(X.price) >> mutate(price_mrank=min_rank(X.price)) >> head(6)
diamonds >> select(X.price) >> mutate(price_cumsum=cumsum(X.price)) >> head(6)
diamonds >> select(X.price) >> mutate(price_cummean=cummean(X.price)) >> head(6)
diamonds >> select(X.price) >> mutate(price_cummax=cummax(X.price)) >> head(6)
diamonds >> select(X.price) >> mutate(price_cummin=cummin(X.price)) >> head(6)
diamonds >> select(X.price) >> mutate(price_cumprod=cumprod(X.price)) >> head(6)

# Summary functions
diamonds >> group_by(X.cut) >> summarize(price_mean=mean(X.price))
diamonds >> group_by(X.cut) >> summarize(price_first=first(X.price))
diamonds >> group_by(X.cut) >> summarize(price_last=last(X.price))
diamonds >> group_by(X.cut) >> summarize(price_penultimate=nth(X.price, -2))
diamonds >> group_by(X.cut) >> summarize(price_n=n(X.price))
diamonds >> group_by(X.cut) >> summarize(price_ndistinct=n_distinct(X.price))
diamonds >> group_by(X.cut) >> summarize(price_iqr=IQR(X.price))
diamonds >> group_by(X.cut) >> summarize(price_min=colmin(X.price))
diamonds >> group_by(X.cut) >> summarize(price_max=colmax(X.price))
diamonds >> group_by(X.cut) >> summarize(price_median=median(X.price))
diamonds >> group_by(X.cut) >> summarize(price_var=var(X.price))
diamonds >> group_by(X.cut) >> summarize(price_sd=sd(X.price))

```


